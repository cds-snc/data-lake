name: Docker build, push and deploy Production

on:
  release:
    types:
    - published

env: 
  AWS_REGION: ca-central-1
  REGISTRY: ${{ vars.PROD_AWS_ACCOUNT_ID }}.dkr.ecr.ca-central-1.amazonaws.com
  TAG_VERSION: ${{ github.ref_name }}

permissions:
  id-token: write
  contents: write
  
jobs:
  docker-build-push-deploy:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - export: platform/gc_notify
            lambda: platform-gc-notify-export
          - export: platform/gc_design_system/airtable
            lambda: platform-gc-design-system-airtable-export
          - export: platform/gc_design_system/npm
            lambda: platform-gc-design-system-npm-export
          - export: platform/support/freshdesk
            lambda: platform-support-freshdesk-export

    steps:
    - name: Audit DNS requests
      uses: cds-snc/dns-proxy-action@50d3033adea55c246f2e314920759cd81ecae522
      env:
        DNS_PROXY_FORWARDTOSENTINEL: "true"
        DNS_PROXY_LOGANALYTICSWORKSPACEID: ${{ secrets.LOG_ANALYTICS_WORKSPACE_ID }}
        DNS_PROXY_LOGANALYTICSSHAREDKEY: ${{ secrets.LOG_ANALYTICS_WORKSPACE_KEY }}

    - name: Checkout
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

    - name: Setup QEMU
      uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3.6.0

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

    - name: Configure AWS credentials using OIDC
      uses: aws-actions/configure-aws-credentials@7474bc4690e29a8392af63c5b98e7449536d5c3a # v4.3.1
      with:
        role-to-assume: arn:aws:iam::${{ vars.PROD_AWS_ACCOUNT_ID }}:role/data-lake-release
        role-session-name: DockerBuildPush
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 # v2.0.1

    - name: Build and push Docker image to Amazon ECR
      working-directory: ./export/${{ matrix.export }}
      run: |
        make docker
        docker tag ${{matrix.lambda}} $REGISTRY/${{matrix.lambda}}:${{ env.TAG_VERSION }}
        docker tag ${{matrix.lambda}} $REGISTRY/${{matrix.lambda}}:latest
        docker push $REGISTRY/${{matrix.lambda}}:${{ env.TAG_VERSION }}
        docker push $REGISTRY/${{matrix.lambda}}:latest

    - name: Update Lambda Docker image
      run: |
        aws lambda update-function-code \
          --function-name ${{matrix.lambda}} \
          --image-uri $REGISTRY/${{matrix.lambda}}:${{ env.TAG_VERSION }} > /dev/null 2>&1
        aws lambda wait function-updated \
          --function-name ${{matrix.lambda}}

    - name: Docker generate SBOM
      uses: cds-snc/security-tools/.github/actions/generate-sbom@34794baf2af592913bb5b51d8df4f8d0acc49b6f # v3.2.0
      env:
        TRIVY_DB_REPOSITORY: ${{ vars.TRIVY_DB_REPOSITORY }}
      with:
        docker_image: "$REGISTRY/${{matrix.lambda}}:${{ env.TAG_VERSION }}"
        dockerfile_path: "./export/${{ matrix.export }}/Dockerfile"
        platform: "linux/arm64"
        sbom_name: "${{matrix.lambda}}"
        token: "${{ secrets.GITHUB_TOKEN }}"
  
